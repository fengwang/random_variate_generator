vg is a pseudo-random variate generator library, aiming to generate a large amount of random numbers, 
with a luxury kinds of built-in distributions(currently 60), aiding applications in gambling, 
statistical sampling, computer simulation, cryptography, completely randomized design, and other areas 
where producing an unpredictable result is desirable. In the wake of C++ generic template 
meta-programming, it is written in c++, compatible with STL.
//===================================================================================================
************************************ 1 QUICK START **************************************************
//===================================================================================================
For a very quick start, here is an example(can be found in file "example/gaussian_test.cc"):
//--------------------------------------------------------------
#include <vg.hpp>
#include <cmath>
#include <map>
#include <iostream>

using namespace std;

int main()
{
    // a gaussian variate generator with parameter 0(the mean) and 4(the variance),
    // the variate type is double,
    // default pseudo-number generator engine is mt19937,
    // the seed for the engine is 0, which is the third argument, but is simply ignored here, or we
    // would have to write variate_generator<double, gaussian, vg::mt19937> vg(0, 4, 0);
    vg::variate_generator<double, vg::gaussian, vg::mt19937> vg(0, 4);    

    map< int, int > sample;

    for ( auto i = vg.begin(); i != vg.begin()+500; ++i )
        sample[round(*i)]++;

    for ( auto i = sample.begin(); i != sample.end(); ++i )
    {
        cout << "\n" << (*i).first << "\t";
        for ( auto j = 0; j < (*i).second; ++j ) cout << "*";
    }

    return 0;
}
//--------------------------------------------------------------
command to compile:
//--------------------------------------------------------------
$g++ -o bin/gaussian_test example/gaussian_test.cc -std=c++0x -O2 -Iinclude
//--------------------------------------------------------------
following output will be produced after execution:
//--------------------------------------------------------------
-16 *
-13 ***
-12 ***
-11 ***
-10 *
-9  ********
-8  *********
-7  **************
-6  ************
-5  ******************
-4  **************************
-3  *********************************
-2  ******************************************
-1  ****************************************************
0   **************************************************
1   **************************************************
2   **********************************************
3   ******************************
4   ************************
5   *******************
6   ****************
7   **************
8   ******
9   ****
10  **
11  ******
12  *****
14  *
15  *
16  *
//--------------------------------------------------------------

//===================================================================================================
************************************** 2 OVERVIEW ***************************************************
//===================================================================================================
A random variate generator consists of three parts: 
    (1) a variate type 
    (2) a probability distribution type 
    (3) an pseudo-random number engine

the variate generator declaration:
    namespace vg{
    template <
              class Return_Type = long double, // (1)
              template<class, class> class Distribution = uniform, // (2) 
              class Engine = mitchell_moore // (3)
             >
    struct variate_generator;
    }//namespace vg

for example, the following line declares a variate_generator<> that generate variates of logarithmic distribution,
int type, with parameter 0.33, using mitchell_moore pseudo-random number engine, with default engine seed. 

    variate_generator<int, logarithmic> vg(0.33);
    
which is equivalent to     

    variate_generator<int, logarithmic, mitchell_moore> vg(0.33, 0);

this following line declares a variate_generator<> that generate variates of hypergeometric distribution,
int type, with parameter 200, 200 and 200, using mt19937 pseudo-random number engine, with engine seed 987654321.

    variate_generator<int, vg::hypergeometric, vg::mt19937> vg(200, 200, 200, 987654321);

once generator vg has been defined, we can generate variates in several ways:
    
   int i1 = vg();
   int i2 = vg;
   int i3 = *(vg.begin());
   vector<int> arr1( vg.begin(), vg.begin()+100);
   vector<int> arr2( 200 );
   fill( arr2.begin(), arr2.end(), vg.begin() );
   
//===================================================================================================
********************************* 3 ENGINES AND DISTRIBUTIONS ***************************************
//===================================================================================================
ENGINES: 
        linear_congruential
        mitchell_moore
        mt19937

DISTRIBUTIONS:
        arcsine
            -- no parameter
        bernoulli
        beta_binomial
        beta
        beta_pascal
        binomial
        burr family( Burr I, Burr II, Burr III, ..., Burr XII )
          ---- n(the order, 1 -- 12), c(shape), k(shape), r(scale)
        cauchy
        chi_square
        digamma
        erlang
        exponential
        exponential_power
        extreme_value
          ---- mu(location), sigma(scale), xi(shape)
        factorial
        f
        gamma
        gaussian
        gaussian_tail
        generalized_hypergeometric_b3
        generalized_waring
        geometric
        grassia
        gumbel_1
        gumbel_2
        hyperbolic_secant
        hypergeometric
        inverse_gaussian
        inverse_polya_eggenberger
        laplace
        levy
        logarithmic
        logistic
        lognormal
        mizutani
        negative_binomial_beta
        negative_binomial
        normal
        pareto
        pascal
        pearson_vi
        pearson
          ---- a(shape), b(shape), c(shape), d(shape)
        planck
        poisson
        polya
        polya_aeppli
        rayleigh
        rayleigh_tail
        singh_maddala
          ---- c(shape), k(shape), r(scale)
        t
        teichroew
        triangular
        trigamma
        uniform
        von_mises
        wald
        waring
        weibull
        yule
        zipf

